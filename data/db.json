{
    "cards": [
      { "id": 1, "question": "What is JavaScript?", "answer": "JavaScript is a programming language that enables interactive web pages.", "status": "Noted" },
      { "id": 2, "question": "What is HTML?", "answer": "HTML (Hypertext Markup Language) is the standard markup language for documents designed to be displayed in a web browser.", "status": "Want to Learn" },
      { "id": 3, "question": "Explain the concept of React components.", "answer": "React components are reusable, self-contained building blocks that render output based on their input props.", "status": "Learned" },
      { "id": 4, "question": "What is the purpose of CSS?", "answer": "CSS (Cascading Style Sheets) is used to style the layout of web pages and enhance their visual presentation.", "status": "Noted" },
      { "id": 5, "question": "How does the 'useState' hook work in React?", "answer": "The 'useState' hook allows functional components to manage state by providing a state variable and a function to update it.", "status": "Want to Learn" },
      { "id": 6, "question": "What is the purpose of the 'map' function in JavaScript?", "answer": "The 'map' function is used to iterate over elements of an array and perform a callback function on each element, returning a new array of the results.", "status": "Learned" },
      { "id": 7, "question": "Explain the concept of responsive web design.", "answer": "Responsive web design ensures that web applications work well on a variety of devices and window or screen sizes.", "status": "Noted" },
      { "id": 8, "question": "What is the 'box model' in CSS?", "answer": "The box model in CSS describes the layout of elements, including content, padding, border, and margin.", "status": "Want to Learn" },
      { "id": 9, "question": "What is the purpose of the 'useEffect' hook in React?", "answer": "The 'useEffect' hook is used for side effects in functional components, such as data fetching or subscriptions.", "status": "Learned" },
      { "id": 10, "question": "Explain the difference between 'let', 'const', and 'var' in JavaScript.", "answer": "'let' and 'const' are block-scoped declarations, while 'var' is function-scoped. 'const' cannot be reassigned after declaration, but 'let' and 'var' can.", "status": "Noted" },
      { "id": 11, "question": "What is the purpose of the 'fetch' function in JavaScript?", "answer": "The 'fetch' function is used to make network requests and is commonly used to fetch data from APIs.", "status": "Want to Learn" },
      { "id": 12, "question": "What is the difference between '=='' and '===' in JavaScript?", "answer": "'==' is the equality operator that performs type coercion, while '===' is the strict equality operator that checks both value and type.", "status": "Learned" },
      { "id": 13, "question": "Explain the concept of event delegation in JavaScript.", "answer": "Event delegation is a technique where a single event listener is attached to a common ancestor of multiple elements, allowing handling events for multiple children with a single listener.", "status": "Noted" },
      { "id": 14, "question": "What is the purpose of the 'async/await' syntax in JavaScript?", "answer": "The 'async/await' syntax is used to work with asynchronous code in a more synchronous-like manner, making it easier to read and maintain.", "status": "Want to Learn" },
      { "id": 15, "question": "Explain the concept of the virtual DOM in React.", "answer": "The virtual DOM is a lightweight copy of the real DOM that React uses to optimize updates by minimizing direct manipulation of the actual DOM.", "status": "Learned" },
      { "id": 16, "question": "What is the purpose of the 'localStorage' in web development?", "answer": "'localStorage' is a web storage object that allows saving key/value pairs in a web browser with no expiration time.", "status": "Noted" },
      { "id": 17, "question": "How can you prevent default behavior in an event handler in JavaScript?", "answer": "You can prevent the default behavior of an event by calling the 'preventDefault()' method on the event object.", "status": "Want to Learn" },
      { "id": 18, "question": "Explain the concept of 'this' in JavaScript.", "answer": "'this' refers to the current execution context in JavaScript, and its value can vary depending on how a function is called.", "status": "Learned" },
      { "id": 19, "question": "What is the purpose of the 'Router' component in React?", "answer": "The 'Router' component is used for declarative navigation and rendering of UI components based on the current URL in a React application.", "status": "Noted" },
      { "id": 20, "question": "How do you define a functional component in React?", "answer": "A functional component in React is defined as a JavaScript function that takes props as an argument and returns React elements.", "status": "Want to Learn" },
      { "id": 21, "question": "What is the 'spread operator' in JavaScript?", "answer": "The spread operator (...) in JavaScript is used to spread the elements of an iterable (like an array or object) into a new array or object.", "status": "Learned" },
      { "id": 22, "question": "Explain the purpose of the 'redux' library in React applications.", "answer": "'redux' is a state management library for JavaScript applications, commonly used with React to manage global state in a predictable way.", "status": "Noted" },
      { "id": 23, "question": "How do you handle forms in React?", "answer": "In React, forms are typically controlled components, where form elements are controlled by React state to manage user input.", "status": "Want to Learn" },
      { "id": 24, "question": "What is the purpose of the 'useReducer' hook in React?", "answer": "The 'useReducer' hook in React is used for managing more complex state logic by dispatching actions to update the state based on a reducer function.", "status": "Learned" },
      { "id": 25, "question": "Explain the concept of 'memoization' in JavaScript.", "answer": "Memoization is an optimization technique that involves caching the results of expensive function calls to improve performance by avoiding redundant computations.", "status": "Noted" },
      { "id": 26, "question": "What is the purpose of the 'CORS' policy in web development?", "answer": "The 'CORS' (Cross-Origin Resource Sharing) policy is a security feature implemented by web browsers to restrict web pages from making requests to a different domain than the one that served the web page.", "status": "Want to Learn" },
      { "id": 27, "question": "Explain the concept of 'hoisting' in JavaScript.", "answer": "'Hoisting' is a JavaScript behavior where variable and function declarations are moved to the top of their containing scope during the compilation phase.", "status": "Learned" },
      { "id": 28, "question": "What is the purpose of the 'axios' library in JavaScript?", "answer": "'axios' is a popular JavaScript library used for making HTTP requests and handling responses in web applications.", "status": "Noted" },
      { "id": 29, "question": "How can you handle authentication in a React application?", "answer": "Authentication in a React application can be handled by using techniques such as JSON Web Tokens (JWT) and storing tokens in local storage or cookies.", "status": "Want to Learn" },
      { "id": 30, "question": "Explain the concept of 'callback functions' in JavaScript.", "answer": "A 'callback function' is a function passed as an argument to another function, which will be invoked at a later time, often in response to an event.", "status": "Learned" },
      { "id": 31, "question": "What is the purpose of the 'Promise' object in JavaScript?", "answer": "A 'Promise' in JavaScript is an object representing the eventual completion or failure of an asynchronous operation and its resulting value.", "status": "Noted" },
      { "id": 32, "question": "How can you handle state in a functional component in React?", "answer": "State in functional components can be managed using the 'useState' hook, which provides a state variable and a function to update it.", "status": "Want to Learn" },
      { "id": 33, "question": "Explain the concept of 'JWT' (JSON Web Token) in web development.", "answer": "'JWT' is a compact, URL-safe means of representing claims to be transferred between two parties, often used for authentication and information exchange.", "status": "Learned" },
      { "id": 34, "question": "What is the purpose of the 'useContext' hook in React?", "answer": "The 'useContext' hook in React is used to subscribe to React context without introducing nesting in your component tree.", "status": "Noted" },
      { "id": 35, "question": "How does the 'debounce' function work in JavaScript?", "answer": "The 'debounce' function is used to delay the execution of a function until after a certain period of inactivity, often used in scenarios like handling user input.", "status": "Want to Learn" },
      { "id": 36, "question": "Explain the concept of 'serverless' architecture.", "answer": "'Serverless' architecture is a cloud computing execution model where cloud providers automatically manage the infrastructure, allowing developers to focus on writing code without worrying about server management.", "status": "Learned" },
      { "id": 37, "question": "What is the purpose of the 'classnames' library in React?", "answer": "'classnames' is a utility for conditionally joining class names together in a React application, making it easier to dynamically apply styles based on different conditions.", "status": "Noted" },
      { "id": 38, "question": "How can you optimize performance in a React application?", "answer": "Performance optimization in a React application involves techniques such as code splitting, lazy loading, using memoization, and optimizing component rendering.", "status": "Want to Learn" },
      { "id": 39, "question": "Explain the concept of 'prop drilling' in React.", "answer": "'Prop drilling' occurs when you need to pass data from a high-level component to a deep-nested child component by passing the data through intermediary components in the hierarchy.", "status": "Learned" },
      { "id": 40, "question": "What is the purpose of the 'useMemo' hook in React?", "answer": "The 'useMemo' hook in React is used to memoize the result of a computation, preventing unnecessary re-execution of that computation in subsequent renders.", "status": "Noted" }
    ],
    "messages": []
  }
  